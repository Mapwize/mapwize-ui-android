apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
def getVersionCodePlus500k = { ->
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'tag', '--list'
            standardOutput = code
        }
        return 500000 + code.toString().split("\n").size()
    }
    catch (ignored) {
        return -1
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--dirty'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null
    }
}
android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode getVersionCodePlus500k()
        versionName getVersionName()
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.1.0'
    if (local_sdk) {
        implementation project(path: ':mapwize-sdk')
        implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:8.4.0'
        implementation('com.mapbox.mapboxsdk:mapbox-android-services:2.2.9@aar') {
            transitive = true
        }
    } else {
        implementation ("io.mapwize.sdk:mapwize-sdk:$mapwize_sdk_version")
    }
    implementation "com.github.IndoorLocation:indoor-location-android:1.0.5"
}

repositories {
    mavenCentral()
}

task javadoc(type: Javadoc) {
    failOnError false

    configurations.implementation.setCanBeResolved(true)

    doFirst {
        configurations.implementation.filter { it.name.endsWith('.aar') }
        .each { aar ->
            copy {
                from zipTree(aar)
                include "**/classes.jar"
                into "$buildDir/tmp/aarsToJars/${aar.name.replace('.aar', '')}/"
            }
        }
    }

    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.implementation
    classpath += fileTree(dir: "$buildDir/tmp/aarsToJars/")

    destinationDir = file("${project.buildDir}/outputs/javadoc/")

    options.memberLevel = JavadocMemberLevel.PROTECTED
    // options.links("https://docs.oracle.com/javase/7/docs/api/")
    // options.links("https://developer.android.com/reference/")
    // options.links("https://developer.android.com/reference/androidx/")
    options.links("https://docs.mapwize.io/developers/android/sdk/latest/javadoc/")

    exclude '**/R.java', '**/BuildConfig.java', '**/**.java.ejs', '**/**.html'
}
task printVersionName {
    doLast {
        println android.defaultConfig.versionName
    }
}